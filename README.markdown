# Сборщик продуктов Ozon

Это Python-программа для парсинга данных о товарах с сайта Ozon. Она собирает ссылки на товары по заданному поисковому запросу, извлекает информацию (артикул, название, бренд, цены, рейтинг, отзывы, данные о продавце и т.д.) и сохраняет её в Excel-файл. Программа поддерживает полный парсинг с нуля и возобновление работы после прерывания.

## Возможности
- Сбор ссылок на товары по поисковому запросу на Ozon.
- Извлечение подробной информации о товарах (артикул, название, бренд, цены, рейтинг, отзывы, продавец, ИНН и т.д.).
- Сохранение данных в Excel-файл с добавлением новых записей к существующим.
- Возобновление парсинга с последней обработанной ссылки.
- Использование готового файла со списком ссылок вместо сбора с сайта.

## Требования
- Python 3.8 или выше.
- Библиотеки Python
- Установленный браузер Chromium (устанавливается автоматически с помощью Playwright).

## Установка

1. **Клонируйте репозиторий или скачайте файлы программы**:
   ```bash
   git clone https://github.com/sxd993/ozon-v2
   cd ozon-v2
   ```

2. **Создайте виртуальное окружение** (рекомендуется):

3. **Установите зависимости**:
   ```bash
   pip install -r req.txt
   ```

4. **Установите Playwright**:
   ```bash
   playwright install
   ```

## Структура проекта
- `main.py` — основной файл программы.
- `utils/` — папка с вспомогательными модулями:
  - `logger.py` — настройка логирования.
  - `prepare_work.py` — запуск браузера и подготовка страницы Ozon.
  - `scroll.py` — сбор ссылок с прокруткой страницы.
  - `product_data.py` — извлечение данных о товарах и запись в Excel.
  - `load_in_excel.py` — устаревший модуль (не используется).

## Использование

Программа запускается через командную строку с помощью `main.py`. Обязательно укажите поисковый запрос (`--query`). Другие параметры опциональны.

### Основные команды

1. **Полный парсинг с нуля**:
   Собирает все ссылки по запросу и извлекает данные о товарах.
   ```bash
   python main.py --query "кран шаровой" --output-file products.xlsx
   ```
   - `--query`: Поисковый запрос (например, "кран шаровой").
   - `--output-file`: Имя Excel-файла для сохранения данных (по умолчанию `ozon_products.xlsx`).

2. **Возобновление парсинга**:
   Продолжает обработку с последней необработанной ссылки, если парсинг был прерван.
   ```bash
   python main.py --query "кран шаровой" --output-file products.xlsx --resume
   ```
   - `--resume`: Включает режим возобновления, используя файлы `temp_links_<запрос>.txt` и `processed_links_<запрос>.txt`.

3. **Парсинг с готовым файлом ссылок**:
   Обрабатывает ссылки из указанного файла вместо сбора с сайта.
   ```bash
   python main.py --query "кран шаровой" --output-file products.xlsx --links-file my_links.txt
   ```
   - `--links-file`: Путь к файлу со списком ссылок (одна ссылка на строку).

4. **Ограничение количества товаров**:
   Указывает максимальное количество товаров для обработки (0 — без ограничения).
   ```bash
   python main.py --query "кран шаровой" --output-file products.xlsx --max-products 100
   ```
   - `--max-products`: Максимальное количество товаров (по умолчанию 0, т.е. все).

### Примеры

- **Собрать данные для всех товаров по запросу "ноутбук"**:
  ```bash
  python main.py --query "ноутбук" --output-file notebooks.xlsx
  ```

- **Возобновить парсинг после прерывания**:
  ```bash
  python main.py --query "ноутбук" --output-file notebooks.xlsx --resume
  ```

- **Обработать 50 товаров из файла ссылок**:
  ```bash
  python main.py --query "смартфон" --output-file smartphones.xlsx --links-file smartphone_links.txt --max-products 50
  ```

## Выходные файлы
- **`products.xlsx` (или указанный вами Excel-файл)**:
  - Содержит данные о товарах: артикул, название, бренд, цены, рейтинг, отзывы, продавец, ссылки и т.д.
  - Новые данные добавляются к существующим, старые записи сохраняются.
- **`temp_links_<запрос>.txt`**:
  - Список всех собранных ссылок (например, `temp_links_кран_шаровой.txt`).
  - Создаётся при полном парсинге и используется для возобновления.
- **`processed_links_<запрос>.txt`**:
  - Список обработанных ссылок.
  - Используется для отслеживания прогресса и возобновления.

## Логирование
- Программа создаёт файл `parser.log` с подробной информацией о процессе (запуск браузера, обработка ссылок, ошибки и т.д.).
- Логи также выводятся в консоль.

## Примечания
- **Прерывание программы**: Если программа прервана (Ctrl+C), она корректно завершит работу и сохранит текущий прогресс. Для продолжения используйте `--resume`.
- **Ошибки**: Если возникают ошибки (например, сайт Ozon не отвечает), программа попытается повторить запрос до 3 раз. Логи помогут диагностировать проблему.
- **Excel-файл**: Убедитесь, что `products.xlsx` не открыт в другом приложении во время работы программы, иначе запись может завершиться с ошибкой.
- **Кодировка файлов**: Все текстовые файлы (`temp_links_*.txt`, `processed_links_*.txt`) используют кодировку UTF-8.

## Устранение неполадок
- **Программа не находит temp_links_<запрос>.txt при возобновлении**:
  - Убедитесь, что файл существует в той же директории, где запускается программа.
  - Проверьте правильность `--query` (например, "кран шаровой" создаёт `temp_links_кран_шаровой.txt`).
- **Данные в products.xlsx перезаписываются**:
  - Это не должно происходить. Проверьте лог на наличие ошибок в `write_data_to_excel`. Если проблема сохраняется, сообщите о ней.
- **Слишком долгое выполнение**:
  - Для больших запросов (тысячи товаров) используйте `--max-products` для ограничения или готовый файл ссылок (`--links-file`).
